import os
os.getcwd()

import pandas as pd
df = pd.read_csv('Bengaluru_House_Data.csv')
df.head()

print('Shape of the dataframe is: ' ,df.shape)

df.columns

df.info()

df.describe().T

df.isna().sum()

   
df.rename(columns = {'size':'size (in BHK)'}, inplace = True)


df["size (in BHK)"].replace({"4 BHK": "4", 
                    "6 BHK": "6",
                   "3 BHK" : "3",
                   "1 Bedroom" : "1",
                    "4 Bedroom":"4","6 Bedroom":"6","3 Bedroom":"3","1 RK":"1","2 Bedroom":"2","7 Bedroom":"7",
                   "1 BHK" : "1","5 Bedroom":"5","9 Bedroom":"9","10 Bedroom":"10","11 Bedroom":"11","12 Bedroom":"12","13 Bedroom":"13",
                   '8 Bedroom' : '8',"18 Bedroom":"18","19 Bedroom":"19","8 BHK" : "8",
                   '2 BHK': '2',
                   '7 BHK': '7',
                   '5 BHK' : '5',
                   '9 BHK': '9',
                   '10 BHK': '10',
                   '11 BHK': '11',
                   '43 BHK': '43',
                             '19 BHK':'19',
                             '16 BHK':'16',
                             '12 BHK':'12',
                             '13 BHK':'13',
                             '14 BHK':'14',
                    '27 BHK':'27',"43 Bedroom":"43",
                   '12 BHK': '12',
                   '18 BHK': '18'}, inplace=True)

dict = {}
for x in list(df.columns):
    dict[x] = df[x].value_counts().shape[0]

pd.DataFrame(dict, index=["Unique Counts"]).transpose()

import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
import plotly.express as px
%matplotlib inline

sns.set_style('darkgrid')
matplotlib.rcParams['font.size'] = 14
matplotlib.rcParams['figure.figsize'] = (9, 5)
matplotlib.rcParams['figure.facecolor'] = '#00000000'

pip install plotly

cat_cols = df.select_dtypes(include = 'object').columns
cat_cols 

num_cols = df.select_dtypes(include = 'float64').columns
num_cols 

sns.countplot(df.area_type,
              palette = 'Set3',
              edgecolor=sns.color_palette("Set3", 4))
#count vs area typeplot

sns.countplot(df['size (in BHK)'],
              palette = 'Set3')

fig, axes = plt.subplots(3,1, figsize=(6,16))

sns.set_theme(style="darkgrid")
axes[0].set_title("Bath distribution")
axes[1].set_title("Balcony distribution")
axes[2].set_title("Price distribution")

sns.boxenplot(y=df.bath,
            palette='Greens', 
            color='red',
           linewidth=3,
           ax=axes[0]);

sns.countplot(df.balcony,
              palette = 'prism',
             ax = axes[1])

sns.boxenplot(y=df.price,
            palette='viridis',
           linewidth=1,
              ax=axes[2])

plt.tight_layout(pad=2);

px.histogram(df.sample(10000), 
           title='Bath vs Price',
           x='bath', 
           y='price')

px.histogram(df.sample(10000), 
           title='Balcony vs Price',
           x='balcony', 
           y='price')

px.histogram(df.sample(10000), 
           title='Bath vs Balcony',
           x='bath', 
           y='balcony')


df

df[df.bhk>20] #display details of houses having more than 20 bedrooms


df["total_sqft"].unique()

def convert_sqft_to_num(x):
  tokens=x.split("-")
  if len(tokens)==2:
    return (float(tokens[0])+float(tokens[1]))/2
  try:
    return float(x)
  except:
    return None 

df["total_sqft"]=df["total_sqft"].apply(convert_sqft_to_num)

df["price_per_sqft"]=df["price"]*1000000/df["total_sqft"] #calculate price per square feet
df.head()

len(df.location.unique())

location_stats=df.groupby("location")["location"].agg("count").sort_values(ascending=False)
print(location_stats)

#check the percentage of df.area_type 

plt.pie(df['area_type'].value_counts().values,labels = df['area_type'].value_counts().index, explode=(0.1,0,0,0.1),shadow=True,autopct='%1.1f%%') 

plt.title("Area___Type")

df.area_type.value_counts().values

df2 = df.copy()
df2.drop('availability', axis=1, inplace=True)

from sklearn import preprocessing 
le = preprocessing.LabelEncoder()
df2['area_type'] = le.fit_transform(df2['area_type'])  #convert area_type to numeric form
df2['area_type'].unique()


location_stats = df2.groupby('location')['location'].agg('count') 
location_stats.sort_values(ascending=False) 
len(location_stats[location_stats<=15]) 

location_less_than_15 = location_stats[location_stats<=15]
location_less_than_15

df2.location = df2.location.apply(lambda x : 'other' 
                                  if x in location_less_than_15 else x) 
df2.location.value_counts() 

df2.head()

df2.describe().T

df2.isnull().sum()

df2.dropna(inplace=True) 

sns.boxplot(x= 'price', data = df2)

sns.displot(df2.price);

# define a function to remove outliers
import numpy as np
def outlier_remover(df, x):
    q25, q75 = np.percentile(df[x], 25) , np.percentile(df[x], 75) 
    IQR = q75 - q25
    outliers = 1.5 * IQR
    lower, upper = (q25 - outliers) , (q75 + outliers) 
    df = df[(df[x] < upper) & (df[x] > lower)]
    
    print('Outliers of "{}" are removed\n'.format(x)) 
    return df

df3 = df2.copy()
df3 = outlier_remover(df3, 'price') 

df3.shape

sns.displot(df3.price)

sns.boxplot('price',data = df3) 

plt.scatter(df2.total_sqft,df2.price)
plt.xlabel('Total_square_feet_Area') 
plt.ylabel('Price of house') 
plt.title('Relationship between price and total square feet before removing outliers')

plt.scatter(df3.total_sqft, df3.price) 
plt.xlabel('Total square feet area') 
plt.ylabel('Price of house') 
plt.title('Relationship between Price and total square feet after removing outliers') 

df3.describe()

df3.corr()

sns.heatmap(df3.corr(), annot=True) ;

#drop area_type and balcony columns
df3.drop(['balcony','area_type'],axis=1,inplace=True) 

df3.head()

# get numerical value of location column using pd. get_dummies
dummies = pd.get_dummies(df3.location)

# merge dummies with df3
df4 = pd.concat([df3, dummies.drop('other',axis=1)],axis=1) 

df4.head()

df4.drop('location', axis=1, inplace=True)

df4.tail()

df4.isnull().sum()

df4 = df4.fillna(method = 'ffill') 



from sklearn.linear_model import LinearRegression
lr_model = LinearRegression()

#divide a feature columns amd price column

X = df4.drop(['price','society','price_per_sqft','size (in BHK)'], axis=1) 

y = df4.price

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20,random_state=10) 
lr_model.fit(X_train, y_train) 

print('train_score :', lr_model.score(X_train, y_train))
print('test_score :',lr_model.score(X_test, y_test) ) 

from sklearn.ensemble import RandomForestRegressor

Rdrm = RandomForestRegressor() 
Rdrm.fit(X_train, y_train) 

print('test_score',Rdrm.score(X_test, y_test) ) 
print("train_score", Rdrm.score(X_train, y_train) )

X

from xgboost import XGBRegressor
xgb = XGBRegressor()
xgb.fit(X_train,y_train)
print('test_score',xgb.score(X_test, y_test) ) 
print("train_score", xgb.score(X_train, y_train) )
#this is the best model for prediction

import tkinter as tk
from tkinter import ttk
from tkinter.messagebox import showinfo
from PIL import ImageTk,Image

def convert_sqft_to_num(x):
  tokens=x.split("-")
  if len(tokens)==2:
    return (float(tokens[0])+float(tokens[1]))/2
  try:
    return float(x)
  except:
    return None 
# columns
columns = ('#1', '#2', '#3')
import pandas as pd
from tkinter.messagebox import showinfo
df = pd.read_csv('Bengaluru_House_Data.csv')
df["total_sqft"]=df["total_sqft"].apply(convert_sqft_to_num)
df["price_per_sqft"]=df["price"]*1000000/df["total_sqft"]
pps = list(df.nlargest(15,['price_per_sqft']).price_per_sqft)
aty = list(df.nlargest(15,['price_per_sqft']).area_type)
loc = list(df.nlargest(15,['price_per_sqft']).location)


tree = ttk.Treeview(root, columns=columns, show='headings')

# define headings
tree.heading('#1', text='PRICE PER SQFT')
tree.heading('#2', text='AREA TYPE')
tree.heading('#3', text='LOCATION')


# generate sample data
rows = []
for n in range(0,15):
    rows.append((pps[n], aty[n], loc[n]))

# adding data to the treeview
i = 0
for contact in rows:
    if i%2 == 0:
        tree.insert('', tk.END, values=contact)
    else:
        tree.insert('', tk.END, values=contact)




# bind the select event
def item_selected(event):
    for selected_item in tree.selection():
        # dictionary
        item = tree.item(selected_item)
        # list
        record = item['values']
        #
        showinfo(title='Information',
                message=','.join(record))


tree.bind('<<TreeviewSelect>>', item_selected)

tree.grid(row=100, column=0, sticky='nsew')

# add a scrollbar
scrollbar = ttk.Scrollbar(root, orient=tk.VERTICAL, command=tree.yview)
tree.configure(yscroll=scrollbar.set)
scrollbar.grid(row=100, column=1, sticky='ns')

# run the app
root.mainloop()


root = tk.Tk()
root.title('GUI TO DISPLAY FIRST 15 AREAS WITH HIGHEST PRICE PER SQFT')
root.geometry('1000x600')
root.configure(bg='purple')
label = tk.Label(
    text="FIRST 15 AREAS WITH HIGHEST PRICE PER SQFT ",foreground="white",background="purple",font="Rabbit")
label.grid()

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
def remove_pps_outliers(df):
    df_out = pd.DataFrame()
    for key, subdf in df.groupby('location'):
        m = np.mean(subdf.price_per_sqft)
        st = np.std(subdf.price_per_sqft)
        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]
        df_out = pd.concat([df_out,reduced_df],ignore_index=True)
    return df_out
def convert_sqft_to_number(x):
    tokens = x.split("-")
    if len(tokens) == 2:
        return (float(tokens[0])+float(tokens[1]))/2
    try:
        return float(x)
    except:
        return None
def ml():
    df = pd.read_csv("Bengaluru_House_Data.csv")
    df = df.drop(["area_type", "society","balcony", "availability"], axis = "columns")
    df = df.dropna()
    df['BHK'] = df["size"].apply(lambda x: int(x.split(" ")[0]))
    df = df.copy()
    df["total_sqft"] = df["total_sqft"].apply(convert_sqft_to_number)
    df = df.copy()
    df["price_per_sqft"] = df["price"]*100000/df["total_sqft"]
    df.location = df.location.apply(lambda x: x.strip())
    location_stats = df['location'].value_counts(ascending=False)
    location_stats_less_than_10 = location_stats[location_stats<=10]
    df.location = df.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)
    df = df[~(df.total_sqft/df.BHK<300)]
    df = remove_pps_outliers(df)
    dummies = pd.get_dummies(df.location)
    df = pd.concat([df,dummies.drop('other',axis='columns')],axis='columns')
    df = df.drop('location',axis='columns')
    X = df.drop(['price'],axis='columns')
    y = df.price
    X = X.drop(['size'],axis='columns')
    X = X.drop(['price_per_sqft'],axis='columns')
    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=42)
    from xgboost import XGBRegressor
    xgb = XGBRegressor()
    xgb.fit(X_train,y_train)
    y = xgb.score(X_test,y_test)
    z = xgb.score(X_train,y_train)
    label1 = tk.Label(
    text="TEST SCORE:",foreground="white",background="purple",font=("Rabbit", 12))
    label1.place(x=450,y=80)
    label2 = tk.Label(
    text=y,foreground="white",background="purple",font=("Rabbit", 12))
    label2.place(x=450,y=100)
    label4 = tk.Label(
    text="TRAIN SCORE:",foreground="white",background="purple",font=("Rabbit", 12))
    label4.place(x=450,y=150)
    label3 = tk.Label(
    text=z,foreground="white",background="purple",font=("Rabbit", 12))
    label3.place(x=450,y=170)


root2 = tk.Tk()
root2.title('GUI TO DISPLAY FIRST 15 AREAS WITH HIGHEST PRICE PER SQFT')
root2.geometry('1000x600')
root2.configure(bg='purple')
label2 = tk.Label(
    text="FIND THE SCORES FOR THE TRAINING AND TESTING DATA ",foreground="white",background="purple",font=("Rabbit", 12))


  
# Add buttons
button1 = tk.Button(root2,text="FIND THE SCORES FOR THE TRAINING AND TESTING DATA",fg = "red",bg = "yellow",command = ml)
button1.pack(pady=30)
root2.mainloop()

